#pragma once

#include "Common.h"

#include <cstdint>
#include <mach/machine.h>
#include <utility>

#include <fmt/format.h>
#include <magic_enum.hpp>

enum class CpuSubType : std::int32_t {
    I386_ALL = CPU_SUBTYPE_I386_ALL,
    I386 = CPU_SUBTYPE_386,
    I486 = CPU_SUBTYPE_486,
    I486SX = CPU_SUBTYPE_486SX,
    I586 = CPU_SUBTYPE_586,
    PENT = CPU_SUBTYPE_PENT,
    PENTPRO = CPU_SUBTYPE_PENTPRO,
    PENTII_M3 = CPU_SUBTYPE_PENTII_M3,
    PENTII_M5 = CPU_SUBTYPE_PENTII_M5,
    CELERON = CPU_SUBTYPE_CELERON,
    CELERON_MOBILE = CPU_SUBTYPE_CELERON_MOBILE,
    PENTIUM_3 = CPU_SUBTYPE_PENTIUM_3,
    PENTIUM_3_M = CPU_SUBTYPE_PENTIUM_3_M,
    PENTIUM_3_XEON = CPU_SUBTYPE_PENTIUM_3_XEON,
    PENTIUM_M = CPU_SUBTYPE_PENTIUM_M,
    PENTIUM_4 = CPU_SUBTYPE_PENTIUM_4,
    PENTIUM_4_M = CPU_SUBTYPE_PENTIUM_4_M,
    ITANIUM = CPU_SUBTYPE_ITANIUM,
    ITANIUM_2 = CPU_SUBTYPE_ITANIUM_2,
    XEON = CPU_SUBTYPE_XEON,
    XEON_MP = CPU_SUBTYPE_XEON_MP,
    X86_ALL = CPU_SUBTYPE_X86_ALL,
    X86_64_ALL = CPU_SUBTYPE_X86_64_ALL,
    X86_ARCH1 = CPU_SUBTYPE_X86_ARCH1,
    POWERPC_ALL = CPU_SUBTYPE_POWERPC_ALL,
    POWERPC_601 = CPU_SUBTYPE_POWERPC_601,
    POWERPC_602 = CPU_SUBTYPE_POWERPC_602,
    POWERPC_603 = CPU_SUBTYPE_POWERPC_603,
    POWERPC_603e = CPU_SUBTYPE_POWERPC_603e,
    POWERPC_603ev = CPU_SUBTYPE_POWERPC_603ev,
    POWERPC_604 = CPU_SUBTYPE_POWERPC_604,
    POWERPC_604e = CPU_SUBTYPE_POWERPC_604e,
    POWERPC_620 = CPU_SUBTYPE_POWERPC_620,
    POWERPC_750 = CPU_SUBTYPE_POWERPC_750,
    POWERPC_7400 = CPU_SUBTYPE_POWERPC_7400,
    POWERPC_7450 = CPU_SUBTYPE_POWERPC_7450,
    POWERPC_970 = CPU_SUBTYPE_POWERPC_970,
    ARM_ALL = CPU_SUBTYPE_ARM_ALL,
    ARM_V4T = CPU_SUBTYPE_ARM_V4T,
    ARM_V6 = CPU_SUBTYPE_ARM_V6,
    ARM_V5TEJ = CPU_SUBTYPE_ARM_V5TEJ,
    ARM_XSCALE = CPU_SUBTYPE_ARM_XSCALE,
    ARM_V7 = CPU_SUBTYPE_ARM_V7,
    ARM_V7F = CPU_SUBTYPE_ARM_V7F,
    ARM_V7K = CPU_SUBTYPE_ARM_V7K,
    ARM_V8 = CPU_SUBTYPE_ARM_V8,
    ARM_V6M = CPU_SUBTYPE_ARM_V6M,
    ARM_V7M = CPU_SUBTYPE_ARM_V7M,
    ARM_V7EM = CPU_SUBTYPE_ARM_V7EM,
    ARM_V8M = CPU_SUBTYPE_ARM_V8M,
    ARM64_ALL = CPU_SUBTYPE_ARM64_ALL,
    ARM64_V8 = CPU_SUBTYPE_ARM64_V8,
    ARM64E = CPU_SUBTYPE_ARM64E,
};

template <> struct fmt::formatter<CpuSubType> {

    template <typename ParseContext> constexpr auto parse(ParseContext &ctx) {
        return ctx.begin();
    }

    template <typename FormatContext>
    auto format(CpuSubType const &subtype, FormatContext &ctx) {
        return fmt::format_to(ctx.out(), "<CpuSubType {:s} ({:#08x})>",
                              magic_enum::enum_name(subtype),
                              to_underlying_int(subtype));
    }
};
